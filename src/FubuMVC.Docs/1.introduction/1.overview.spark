<!--Title: Overview-->
<!--Url: overview-->

<markdown>

<Section title="What is FubuMVC?" id="what-is-it">

FubuMVC is an open source framework for web development in .Net written with the C# language started by a team of developers who
were looking for a different type of development experience than what the mainstream .Net tools provide.

The goals and architectural philosophy of FubuMVC is:

  * Allow developers to write very clean code with little or no coupling to framework infrastructure -- i.e.,
    keep the repetitive ceremony code like attributes, marker interfaces, elaborate fluent interfaces, or mandatory base classes that seem to plague
    other .Net frameworks to a bare minimum.	

  * Exploit the idea of [convention over
    configuration](http://msdn.microsoft.com/en-us/magazine/dd419655.aspx) for
    better productivity, but allow users to teach FubuMVC about their own
    conventions if the built in conventions don't fit.

  * Remove friction from automated testing of your application code.

  * Maximize the ability to use composition throughout your application by
    focusing on SOLID principles, separation of concerns,
    [DRY](http://en.wikipedia.org/wiki/Don't_repeat_yourself). 
	
  * Modular architectures. FubuMVC includes the most sophisticated and
    capable infrastructure for modularizing and extending web applications in
    the .NET ecosystem.

  * Provide a less painful development experience with informative
    diagnostics about your application

  * Use static typing in an advantageous way. Many other alternative web
    frameworks in the .NET space are faithful copies of Ruby or Python
    frameworks that have neither the strengths of Ruby/Python or C#. FubuMVC
    uses the rich metadata from static typing to drive conventions and reduce
    errors. If you prefer Ruby on Rails or Sinatra style development, we
    think you should use Ruby on Rails or Sinatra instead of attempting to
    work that way inside of C#.

  * Eliminate the dreaded "tag soup" problem in views by using advanced HTML
    helpers and conventions to DRY up your views

</Section>	
	
<Section title="What do I need to know before I get started?" id="what-to-know">

FubuMVC is open source. That means it's developed, for free, by dedicated
individuals without a lot of free time (we have families and day jobs). While
we try to provide a nice, polished experience for developer, it can't always
succeed in that objective. FubuMVC is licensed under the permissive Apache 2.0
license:
[https://github.com/DarthFubuMVC/fubumvc/raw/master/license.txt](https://github.com/DarthFubuMVC/fubumvc/raw/master/license.txt).
Contributions are most certainly welcome, just fork the [Git
repository](https://github.com/DarthFubuMVC/fubumvc) and start firing off pull
requests.

As of May 2011, FubuMVC is powering production websites at 56 companies with
more in development. While we know that FubuMVC will never attain the usage of
the official Microsoft offerings, we would like to have more users just to make
the ecosystem richer and more viable for the long run.


  <Info>
    FubuMVC will be rougher and more raw than something you might get from
    Microsoft or a 3rd party library vendor. Please bear with us as we improve
    and make FubuMVC better. Your feedback and suggestions are always welcome.
    Your assistance and time are welcome more, though :)
  </Info>

</Section>

<Section title="Core Architecture" id="architecture">

FubuMVC takes a slightly different approach to the classic [Model 2 Model View
Controller pattern](http://en.wikipedia.org/wiki/Model_2) that puts more focus
on composing a pipeline of what we call "behaviors" that are completely unaware
of each other rather than the traditional Model-View-Controller triad.

A typical web request for a view will look something like:

  1. An HTTP request is received by the web server. The ASP.NET routing
     module acts as a front controller to choose a "chain" of behaviors to
     execute.

  1. The first behavior calls an "action" (think Controller) that interacts
     with the rest of your application and returns a view model representing
     the data to be rendered by the view.

  1. A second behavior invokes a WebForms or Spark view to render the view
     model that was returned from the action in the previous step.

As far as a developer is concerned, all the familiar elements of classic MVC
are present, but there's nothing to stop you from composing a different
pipeline of behaviors for more sophisticated request handling.

</Section>

<Section title="View Models" id="view-models">

View models are typically [Data Transfer
Objects](http://en.wikipedia.org/wiki/Data_transfer_object) that are either
inputs to or outputs from behaviors. It's probably advantageous to think of
view models as messages passed to or between behaviors. As a baked in
"opinion," FubuMVC strongly prefers that the input models are unique across
actions in your application. FubuMVC can use an input model to resolve URL's or
authorization rules in the system. Likewise, output model signatures from
action methods are used to "attach" view and other output behaviors to a
behavior chain.

</Section>

<Section title="Actions / Endpoints" id="actions">

In classic MVC the controllers have the responsibility of processing the HTTP
input and deciding what data was to be displayed by the view layer.  In FubuMVC
this responsibility is performed by what we simply call "actions." Actions in
FubuMVC are just methods on concrete
[POCO](http://en.wikipedia.org/wiki/Plain_Old_CLR_Object) classes in your
application that will be called during an HTTP request like the following:

<Snippet name="overview-homecontroller" />

Typically, you will let FubuMVC marshal the raw HTTP data into an input model,
then FubuMVC will call your action method directly and store any output where
later behaviors can find it. This is what we call the "one model in, one model
out" philosophy, meaning that actions should typically only be concerned with
your application's data and services rather than exercising framework
machinery.

One of the original goals of FubuMVC was to simplify our controller actions so
that all they had to do was process a request object and return a response with
no coupling to giant base classes or repetitive boilerplate code just to feed
the framework. We believe that the "one model in, one model out" opinion
makes our code easier to read, write, and test by removing the noise code so
prevalent in other .NET solutions. It also greatly improves our ability to
compose the runtime pipeline and creates traceability between parts of the
application.

</Section>

<Section title="Views" id="views">

Now that you've got view models and actions to process them, you need something
to render the view model into HTML. As of this writing, FubuMVC supports the
Web Forms and Spark view engines. In addition, you can happily have actions
spit out raw HTML or
[HtmlTag/HtmlDocument](https://github.com/DarthFubuMVC/htmltags) objects.

</Section>

<Section title="Behaviors and Behavior Chains" id="behaviors">

During day to day development most developers are going to be working strictly
with view models, actions, and views. Internally, the FubuMVC framework sees
all these things as a chain of "behavior" objects nested within each other in
what we frequently refer to as the [Russian Doll
Model](http://codebetter.com/jeremymiller/2011/01/09/fubumvcs-internal-runtime-the-russian-doll-model-and-how-it-compares-to-asp-net-mvc-and-openrasta/).

Even a simple HTTP request is likely to be handled by multiple behaviors. While
FubuMVC comes out of the box with behaviors for common tasks like Json
serialization/deserialization, calling actions, and rendering views, you can
build your own custom behaviors.

</Section>

<Section title="Wrappers" id="wrappers">

Wrappers are simply behaviors that you can use to perform additional work
during an HTTP request like authorization checks, caching, activity tracking,
or just extra auditing.

</Section>

<Section title="BehaviorGraph and FubuRegistry" id="behaviorgraph">

FubuMVC contains a configuration model called BehaviorGraph that completely
models how each possible HTTP endpoint will be handled. For each HTTP endpoint
in the system, BehaviorGraph models:

  1. Routes and URL's
  1. Behavior Chains
  1. Actions to be called
  1. Views or other output behaviors like Json output that will be called
  1. Authorization rules
  1. Wrappers

You won't work directly with these objects daily, but understanding the
underlying BehaviorGraph model is crucial to writing your own FubuMVC
conventions and policies later.

</Section>

<Section title="Inversion of Control Container" id="ioc">

FubuMVC is built around the idea of composition, but that composition can come
at a cost. FubuMVC uses your application's IoC container to assemble all the
various pieces, services, behaviors, and extensions that make up a functioning
FubuMVC application. We like to say that FubuMVC is "Dependency Injection
turtles all the way down," meaning that **all** FubuMVC services are resolved
from the IoC container without hacks like "IDependencyResolver."


  <Info>
    At this writing (Nov 2013), FubuMVC supports the StructureMap, Autofac, and Castle Windsor containers, with work ongoing to support Ninject.
  </Info>

</Section>  
  
<Section title="Bottles" id="bottles">  

FubuMVC uses the [Bottles project](https://github.com/DarthFubuMVC/bottles)
for modularity.  Bottles can be used to break your application up into
different "areas" or to extend your application with new content or abilities.

</Section>

<Section title="Web.config dependencies" id="web-config">

I wish it wasn't so, but for now FubuMVC has some required dependencies that
must be configured via XML in web.config:

  1. The System.Web.Routing.UrlRoutingModule module must be registered
  1. Access to the folder "Content" should be authorized for all users
     (this is where FubuMVC assumes that content like images, scripts, and
     styles are stored)
  1. Access to the folder "\_content" should be authorized for all users
     (this is where FubuMVC assumes that content like images, scripts, and
     styles are stored for packages. This will be changed in the near
     term)
  1. Access to the folder "fubu-content" should be denied for all users.
     This folder is related to the Bottles support in FubuMVC

	 <Info>In the longer term, the FubuMVC team expects to move to using the new OWIN hosting directly with the recommendation that ASP.Net hosting be discontinued.  When and if that day comes, the web.config dependencies will be obsolete.</Info>
	 
	 
</Section>	 
	 
</markdown>

